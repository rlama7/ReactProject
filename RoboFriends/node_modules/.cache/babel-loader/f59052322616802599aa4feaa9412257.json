{"ast":null,"code":"import _defineProperty from \"/Users/rlama/Documents/ReactPro/ReactProject/RoboFriends/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from \"./constants.js\";\nconst initialState = {\n  searchField: \"\"\n};\nexport const searchRobots = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return _objectSpread({}, state, {\n        searchField: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\nconst initialStateRobots = {\n  isPending: true,\n  robots: []\n};\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {\n        isPending: true\n      });\n\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      });\n\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/rlama/Documents/ReactPro/ReactProject/RoboFriends/src/reducers.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialState","searchField","searchRobots","state","action","type","payload","initialStateRobots","isPending","robots","requestRobots","Object","assign","error"],"mappings":";;;;;;AAAA,SACEA,mBADF,EAEEC,sBAFF,EAGEC,sBAHF,EAIEC,qBAJF,QAKO,gBALP;AAOA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE;AADM,CAArB;AAIA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAM,GAAG,EAAhC,KAAuC;AACjE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,mBAAL;AACE,+BAAYO,KAAZ;AAAmBF,QAAAA,WAAW,EAAEG,MAAM,CAACE;AAAvC;;AACF;AACE,aAAOH,KAAP;AAJJ;AAMD,CAPM;AASP,MAAMI,kBAAkB,GAAG;AACzBC,EAAAA,SAAS,EAAE,IADc;AAEzBC,EAAAA,MAAM,EAAE;AAFiB,CAA3B;AAKA,OAAO,MAAMC,aAAa,GAAG,CAACP,KAAK,GAAGI,kBAAT,EAA6BH,MAAM,GAAG,EAAtC,KAA6C;AACxE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,sBAAL;AACE,aAAOc,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,KAAlB,EAAyB;AAAEK,QAAAA,SAAS,EAAE;AAAb,OAAzB,CAAP;;AACF,SAAKV,sBAAL;AACE,aAAOa,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,KAAlB,EAAyB;AAC9BM,QAAAA,MAAM,EAAEL,MAAM,CAACE,OADe;AAE9BE,QAAAA,SAAS,EAAE;AAFmB,OAAzB,CAAP;;AAIF,SAAKT,qBAAL;AACE,aAAOY,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,KAAlB,EAAyB;AAC9BU,QAAAA,KAAK,EAAET,MAAM,CAACE;AADgB,OAAzB,CAAP;;AAGF;AACE,aAAOH,KAAP;AAbJ;AAeD,CAhBM","sourcesContent":["import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants.js\";\n\nconst initialState = {\n  searchField: \"\"\n};\n\nexport const searchRobots = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: true,\n  robots: []\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload\n      });\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}