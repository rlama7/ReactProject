{"ast":null,"code":"var _jsxFileName = \"/Users/rlama/Documents/ReactPro/ReactProject/seasons/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport Spinner from \"./Spinner\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lat: null,\n      errorMessage: \"\"\n    };\n  }\n\n  // best for data loading, API requests\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition( // callback\n    position => this.setState({\n      lat: position.coords.latitude\n    }), err => this.setState({\n      errorMessage: err.message\n    }));\n  } // end comopnentDidMount()\n  // componentDidUpdate() {\n  //   console.log('My component was updated')\n  // }\n  // componentWillUnmount() {}\n\n\n  renderContent() {\n    // conditional rendering\n    if (this.state.errorMessage && !this.state.lat) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"Error: \", this.state.errormessage);\n    }\n\n    if (!this.state.errorMessage && this.state.lat) {\n      return React.createElement(SeasonDisplay, {\n        lat: this.state.lat,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Spinner, {\n      message: \"Please accept location request\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    });\n  } // render() --> react requirement for class based component\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"border red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, this.renderContent());\n  } // end render()\n\n\n}\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41\n  },\n  __self: this\n}), document.querySelector(\"#root\"));","map":{"version":3,"sources":["/Users/rlama/Documents/ReactPro/ReactProject/seasons/src/index.js"],"names":["React","ReactDOM","SeasonDisplay","Spinner","App","Component","state","lat","errorMessage","componentDidMount","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","message","renderContent","errormessage","render","document","querySelector"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAChCC,KADgC,GACxB;AAAEC,MAAAA,GAAG,EAAE,IAAP;AAAaC,MAAAA,YAAY,EAAE;AAA3B,KADwB;AAAA;;AAGhC;AACAC,EAAAA,iBAAiB,GAAG;AAClBC,IAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,EACE;AACAC,IAAAA,QAAQ,IAAI,KAAKC,QAAL,CAAc;AAAER,MAAAA,GAAG,EAAEO,QAAQ,CAACE,MAAT,CAAgBC;AAAvB,KAAd,CAFd,EAGEC,GAAG,IAAI,KAAKH,QAAL,CAAc;AAAEP,MAAAA,YAAY,EAAEU,GAAG,CAACC;AAApB,KAAd,CAHT;AAKD,GAV+B,CAU9B;AAEF;AACA;AACA;AAEA;;;AAEAC,EAAAA,aAAa,GAAG;AACd;AACA,QAAI,KAAKd,KAAL,CAAWE,YAAX,IAA2B,CAAC,KAAKF,KAAL,CAAWC,GAA3C,EAAgD;AAC9C,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAa,KAAKD,KAAL,CAAWe,YAAxB,CAAP;AACD;;AACD,QAAI,CAAC,KAAKf,KAAL,CAAWE,YAAZ,IAA4B,KAAKF,KAAL,CAAWC,GAA3C,EAAgD;AAC9C,aAAO,oBAAC,aAAD;AAAe,QAAA,GAAG,EAAE,KAAKD,KAAL,CAAWC,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AACD,WAAO,oBAAC,OAAD;AAAS,MAAA,OAAO,EAAC,gCAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GA3B+B,CA6BhC;;;AACAe,EAAAA,MAAM,GAAG;AACP,WAAO;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6B,KAAKF,aAAL,EAA7B,CAAP;AACD,GAhC+B,CAgC9B;;;AAhC8B;;AAmClCnB,QAAQ,CAACqB,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAzB","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport Spinner from \"./Spinner\";\n\nclass App extends React.Component {\n  state = { lat: null, errorMessage: \"\" };\n\n  // best for data loading, API requests\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      // callback\n      position => this.setState({ lat: position.coords.latitude }),\n      err => this.setState({ errorMessage: err.message })\n    );\n  } // end comopnentDidMount()\n\n  // componentDidUpdate() {\n  //   console.log('My component was updated')\n  // }\n\n  // componentWillUnmount() {}\n\n  renderContent() {\n    // conditional rendering\n    if (this.state.errorMessage && !this.state.lat) {\n      return <div>Error: {this.state.errormessage}</div>;\n    }\n    if (!this.state.errorMessage && this.state.lat) {\n      return <SeasonDisplay lat={this.state.lat} />;\n    }\n    return <Spinner message=\"Please accept location request\" />;\n  }\n\n  // render() --> react requirement for class based component\n  render() {\n    return <div className=\"border red\">{this.renderContent()}</div>;\n  } // end render()\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"]},"metadata":{},"sourceType":"module"}